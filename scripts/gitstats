#!/bin/bash


# Set formatting macros
bold=`tput bold`
normal=`tput sgr0`

# Given a directory name (./dirname/), fetch remote changes
function fetchRepoUpdates () {
    dir="$1"
    pushd "$dir" > /dev/null
    git fetch &> /dev/null
    popd > /dev/null
}

# Given a directory name (./dirname/), print out a status line for that git repo
function checkRepoStatus () {
    dir="$1"
    pushd "$dir" > /dev/null

    gitdir=$(echo "$dir" | sed "s/\.\/\(.*\)\//\1/")
    gitbranch=$(git rev-parse --abbrev-ref HEAD)
    gitstat=$(git status)

    ahead=$(echo "$gitstat" | egrep "ahead of '.+' by [0-9]+ commits" -o | sed "s/of '.\+' //")
    behind=$(echo "$gitstat" | egrep "behind '.+' by [0-9]+ commits" -o | sed "s/'.\+' //")
    diverged=$(echo "$gitstat" | egrep "[0-9]+ and [0-9]+ different commits" -o)
    unstaged=$(echo "$gitstat" | egrep "Changes not staged for commit" -o)
    staged=$(echo "$gitstat" | egrep "Changes to be committed" -o)

    echo -en "${bold}$gitdir${normal}\t"

    if [ "$gitbranch" != "master" ]; then
        echo -en "\e[34m"
        echo -n "in branch $gitbranch"
    elif [ -n "$ahead" ]; then
        echo -en "\e[35m"
        echo -n "$ahead"
    elif [ -n "$behind" ]; then
        echo -en "\e[36m"
        echo -n "$behind"
    elif [ -n "$diverged" ]; then
        echo -en "\e[31m"
        echo -n "diverged with $diverged"
    else
        if [ -n "$staged" ] || [ -n "$unstaged" ]; then
            echo -en "\e[33m"
        else
            echo -en "\e[32m"
        fi
        echo -n "up to date"
    fi

    if [ -n "$staged" ] && [ -n "$unstaged" ]; then
        echo -en "\e[33m"
        echo -n ", with staged and unstaged changes"
    elif [ -n "$staged" ]; then
        echo -en "\e[33m"
        echo -n ", with staged changes"
    elif [ -n "$unstaged" ]; then
        echo -en "\e[33m"
        echo -n ", with unstaged changes"
    fi

    echo -e "\e[0m"
    popd > /dev/null
}


# Parse flags
if [[ $@ =~ "-h" ]] || [[ $@ =~ "--help" ]]; then
    echo "Usage: $0 [-n/--nofetch] [directoryname (default cwd)]"
    echo ""
    echo "Searches the provided directory for git repositories, and shows the update"
    echo "status of those directories."
    echo ""
    echo "Unless --nofetch is specified, first fetches all remote changes for the"
    echo "searched repositories."
    exit 0
fi

fetch=true
if [ "$1" == "-n" ] || [ "$1" == "--nofetch" ]; then
    fetch=false
    shift 1
fi

if [ -n "$1" ]; then
    pushd "$1" > /dev/null
fi


# Check for updates
if [ $fetch == true ]; then
    echo "Checking for remote updates..."
    for dir in ./*/
    do
        if [ -d "$dir/.git" ]
        then
            fetchRepoUpdates "$dir"
        fi
    done
    echo ""
fi


# Print statuses, piping to columns for formatting
for dir in ./*/
do
    if [ -d "$dir/.git" ]
    then
        checkRepoStatus "$dir"
    fi
done | column -s $'\t' -t

#!/bin/bash


# Set formatting macros
bold=`tput bold`
normal=`tput sgr0`

blue="\x1B[34m"
cyan="\x1B[36m"
nocolor="\x1B[0m"
green="\x1B[32m"
orange="\x1B[33m"
purple="\x1B[35m"
red="\x1B[31m"

# Given a directory name (./dirname/), fetch remote changes
function fetchRepoUpdates () {
    dir="$1"
    pushd "$dir" > /dev/null
    gitdir=$(echo "$dir" | sed "s/\.\/\(.*\)\//\1/" |
        sed "s/\.\//$(basename `pwd`)/")
    printf "$gitdir "
    git fetch &> /dev/null
    popd > /dev/null
}

# Given a directory name (./dirname/), print out a status line for that git repo
function checkRepoStatus () {
    dir="$1"
    pushd "$dir" > /dev/null

    gitdir=$(echo "$dir" | sed "s/\.\/\(.*\)\//\1/" |
        sed "s/\.\//$(basename `pwd`)/")
    gitbranch=$(git rev-parse --abbrev-ref HEAD)
    gitstat=$(git status)

    remote=$(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD))
    ahead=$(echo "$gitstat" | egrep "ahead of '.+' by [0-9]+ commits?" -o | \
        sed "s/of '.\+' //")
    behind=$(echo "$gitstat" | egrep "behind '.+' by [0-9]+ commits?" -o | \
        sed "s/'.\+' //")
    diverged=$(echo "$gitstat" | egrep "[0-9]+ and [0-9]+ different commits?" -o | \
        sed "s/\([0-9]\+\) and \([0-9]\+\) different commits\?/\1 ahead, \2 behind/")
    unstaged=$(echo "$gitstat" | \
        egrep "(not staged for commit)|(Changed but not updated)" -o)
    staged=$(echo "$gitstat" | egrep "to be committed" -o)

    echo -en "${bold}$gitdir${normal}\t"

    if [ "$gitbranch" != "master" ]; then
        echo -en "${blue}in branch $gitbranch, "
    fi

    if [ -n "$ahead" ]; then
        echo -en "$purple$ahead"
    elif [ -n "$behind" ]; then
        echo -en "$cyan$behind"
    elif [ -n "$diverged" ]; then
        echo -en "${red}diverged ($diverged)"
    elif [ -n "$remote" ]; then
        if [ -n "$staged" ] || [ -n "$unstaged" ]; then
            echo -en "$orange"
        else
            echo -en "$green"
        fi
        echo -n "up to date"
    else
        echo -n "no upstream"
    fi

    if [ -n "$staged" ] && [ -n "$unstaged" ]; then
        echo -en ", ${orange}staged and unstaged changes"
    elif [ -n "$staged" ]; then
        echo -en ", ${orange}staged changes"
    elif [ -n "$unstaged" ]; then
        echo -en ", ${orange}unstaged changes"
    fi

    echo -e "$nocolor"
    popd > /dev/null
}


# Parse flags
if [[ $@ =~ "-h" ]] || [[ $@ =~ "--help" ]]; then
    echo "Usage: $0 [-n/--nofetch] [directoryname (default cwd)]"
    echo ""
    echo "Searches the provided directory for git repositories, and shows the update"
    echo "status of those directories."
    echo ""
    echo "Unless --nofetch is specified, first fetches all remote changes for the"
    echo "searched repositories."
    exit 0
fi

fetch=true
if [ "$1" == "-n" ] || [ "$1" == "--nofetch" ]; then
    fetch=false
    shift 1
fi

if [ -n "$1" ]; then
    pushd "$1" > /dev/null
fi


# If the current directory is a git repo, then 
inrepo=$(git rev-parse --is-inside-work-tree 2> /dev/null)
if [ "$inrepo" == true ]; then
    pushd `git rev-parse --show-cdup` > /dev/null
    directories=./
else
    directories=./*/
fi

# Check for updates
if [ $fetch == true ]; then
    echo "Checking for remote updates..."
    for dir in $directories; do
        if [ -d "$dir/.git" ]; then
            fetchRepoUpdates "$dir"
        fi
    done
    printf "\n\n"
fi


# Print statuses, piping to columns for formatting
for dir in $directories; do
    if [ -d "$dir/.git" ]; then
        checkRepoStatus "$dir"
    fi
done | column -s $'\t' -t
